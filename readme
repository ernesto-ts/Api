# # # aqui como faz para funcionar

# # # terminal: node server.js
# # # node --watch server
# # # roda servidor porta 3000
# # # ____________________________________________________
# # # *restart do servido e reestarta apos salvar:
# # # terminal: node --watch server
# # # reda servidor toda vez que atualiza
# # # ____________________________________________________
# # # Deve ser na porta 3000
# # # *abre um site do prisma para ver banco de dados
# # # terminal localhost:5555:
# # # npx prisma studio

# <!-- as vezes o pisma engasga e precisa ajustar 
# principalmete apos criar novo schema

# ##npx prisma generate

# ##npx audit
# ##npx audit fix



# # # ____________________________________________________
# # # biblioteca para requisições front e back
# # # npm install axios
# # # _____________________________________________________
# # # prisma https://www.prisma.io/

# # # npm install prisma --save-dev
# # # npx prisma init (cria arquivos inclusive .env)
# # # npx prisma db push
# # # npx instal @prisma/client
# # # npx prisma studio


# REMOVIDO DIA 05/05 CRIAR LINHA COM MOTORISTA ASSOCIADO

# generator client {
#   provider = "prisma-client-js"
# }

# datasource db {
#   provider = "mongodb"
#   url      = env("DATABASE_URL")
# }

# model User {
#   id       String         @id @default(auto()) @map("_id") @db.ObjectId
#   email    String         @unique
#   name     String
#   password String
#   linhas   UsuarioLinha[] 
# }

# model Admin {
#   id       String @id @default(auto()) @map("_id") @db.ObjectId
#   email    String @unique
#   name     String
#   password String
# }

# model Driver {
#   id         String     @id @default(auto()) @map("_id") @db.ObjectId
#   email      String     @unique
#   name       String
#   cnh        String
#   categoria  String
#   password   String
#   veiculos   Vehicle[]  @relation("MotoristaVeiculo")
# }

# model Vehicle {
#   id           String    @id @default(auto()) @map("_id") @db.ObjectId
#   marca        String
#   placa        String    @unique
#   tipo         String
#   lotacao      Int
#   disponivel   Boolean   @default(true)

#   motorista     Driver?   @relation("MotoristaVeiculo", fields: [motoristaId], references: [id])
#   motoristaId   String?   @db.ObjectId

#   linhas        Linha[]
# }

# model Ponto {
#   id        String   @id @default(auto()) @map("_id") @db.ObjectId
#   nome      String
#   latitude  Float
#   longitude Float
#   createdAt DateTime @default(now())
# }

# model Rota {
#   id        String      @id @default(auto()) @map("_id") @db.ObjectId
#   nome      String
#   pontos    RotaPonto[]
#   createdAt DateTime    @default(now())
#   linhas    Linha[]
# }

# type RotaPonto {
#   latitude  Float
#   longitude Float
# }



# model Linha {
#   id         String         @id @default(auto()) @map("_id") @db.ObjectId
#   descricao  String
#   rota       Rota           @relation(fields: [rotaId], references: [id])
#   rotaId     String         @db.ObjectId
#   veiculo    Vehicle        @relation(fields: [veiculoId], references: [id])
#   veiculoId  String         @db.ObjectId
#   usuarios   UsuarioLinha[]
#   createdAt  DateTime       @default(now())
# }


# model UsuarioLinha {
#   id         String   @id @default(auto()) @map("_id") @db.ObjectId
#   usuario    User     @relation(fields: [usuarioId], references: [id])
#   usuarioId  String   @db.ObjectId
#   linha      Linha    @relation(fields: [linhaId], references: [id])
#   linhaId    String   @db.ObjectId
#   status     String   @default("pendente")
#   createdAt  DateTime @default(now())
# }
